;; @@@@@@@@@@@
;; things to mess around with
;; color chooser for fast color choosing
;; done widget for detecting if hyprshade bluelight filter is on
;; user env variable pointing to config path for shell scripts

;; @@@@@@@@
;; notes
;; - space-evenly on multiple objects takes the max size and makes every object that size

;; @@@@@@@@@@@@@@@@@@@
;; Weather
;; @@@@@@@@@@@@@@@@@@@
(defpoll RUN :interval "5m" `scripts/weather_info --getdata`)
; (defvar RUN "test")
(defpoll ICON :interval "5m" `scripts/weather_info --icon`)
(defpoll TEMP :interval "5m" `scripts/weather_info --temp`)
(defpoll HEX :interval "5m" `scripts/weather_info --hex`)
(defpoll QUOTE :interval "5m" `scripts/weather_info --quote`)
(defpoll QUOTE2 :interval "5m" `scripts/weather_info --quote2`)
(defpoll SUNRISE :interval "60m" `scripts/weather_info --sunrise`)
(defpoll SUNSET :interval "60m" `scripts/weather_info --sunset`)

(defwidget weatherwidget [] 
			(box :class "weatherbox" :orientation "h" :spacing 0 :valign "center" :halign "end" :space-evenly "false" :vexpand "false" :hexpand "false"
				(label :style "color: ${HEX};" :class "weathericon" :text ICON)
				(label :class "weathertemp" :text TEMP)
				(label :class "separator" :text "")
				(label :class "weatherquote":text QUOTE)))

(defwidget weatherquote2widget []
		(box :class "weatherbox" :orientation "h" :spacing 0 :valign "center" :halign "end" :space-evenly "false" :vexpand "false" :hexpand "false"
		(label :class "weatherquote2" :text QUOTE2)))

(defwidget weatherquoteswidget []
		(box :orientation "h" :spacing 5 :valign "center" :halign "end" :space-evenly "false"
		(weatherwidget)
		(weatherquote2widget)))

(defwidget weatherthrowawaywidget []
		(label :active false :visible false :text RUN))

(defwidget weathertogetherwidget []
		(box :orientation "h" :spacing 5 :valign "center" :halign "end" :space-evenly "false"
		(weatherquoteswidget)
		(weatherthrowawaywidget)))

(defwindow weatherwindow
											:monitor 3
											:geometry (geometry :x "17.5%"
																															:y "-30px"
																															; :width "100px"
																															:height "30px"
																															:anchor "top left")
											:stacking "fg"
			(weathertogetherwidget))

(defwidget suntimeicon [icon stclass]
		(box :valign "center"
		(label :class stclass :text icon)))

(defwidget suntimewidget []
		(box :class "suntime" :orientation "h" :spacing 0 :space-evenly false
				(suntimeicon :icon "󰖜" :stclass "suntimeicon")
				(label :class "suntimetext1" :text "${SUNRISE}")
				(label :class "suntimetext2" :text "${SUNSET}")
				(suntimeicon :icon "󰖛" :stclass "suntimeicon2")))

(defwindow suntimewindow
											:monitor 3
											:geometry (geometry :x "17.3%"
																															:y "1%"
																															; :width "100px"
																															; :height "24px"
																															:anchor "top left")
											:stacking "bg"
			(suntimewidget))


;; @@@@@@@@@@@@@@@@@@@@@@@
;; Apps
;; @@@@@@@@@@@@@@@@@@@@@@@
(defwidget appsinnerwidget [] 
		(box :class "dockbox" :height 20
			(box :orientation "h" :spacing 15 :valign "center" :halign "center" :space-evenly false
				(button :style "background-image: url('icon.svg');" :class "appicon" :onclick "godot &")
				(button :style "background-image: url('vscode.svg');" :class "appicon" :onclick "code &")
				(button :style "background-image: url('aseprite.png');" :class "appicon" :onclick "/home/sand/CrucialSSD/SteamLibrary/steamapps/common/Aseprite/aseprite &")
				)))

; (defwidget appswidget []
; 			(box 
; 					(appsinnerwidget)))

(defwindow appswindow
           :monitor 3
           :geometry (geometry :x "4.4%"
                               :y "20%"
                               ; :width "300px"
                               ; :height "80px"
                               :anchor "top right")
           :stacking "bg"
           ; :reserve (struts :distance "80px" :side "top")
           ; :windowtype "dock"
           ; :wm-ignore false
			(appsinnerwidget))

(defwindow appstabletwindow
           :monitor 2
           :geometry (geometry :x "40.7%"
                               :y "46.3%"
                               ; :width "300px"
                               ; :height "80px"
                               :anchor "top left")
           :stacking "bg"
           ; :reserve (struts :distance "80px" :side "top")
           ; :windowtype "dock"
           ; :wm-ignore false
			(appsinnerwidget))

;; @@@@@@@@@@@@@@@@@@@@@@@
;; Time
;; @@@@@@@@@@@@@@@@@@@@@@@
(defpoll time :interval "10s"
  "date '+%I:%M %p - %a, %b %d'")
; the icon color is based on whether hyprshade is auto (orange) or off (blue), not if the bluelight filter is on or off.
(defpoll filterindicator :interval "1m" "scripts/bluelightfilterdetection.sh --getcolor")

(defwidget clockiconwidget [icon iconcolor]
		(box
			; (color-chooser)
			(label :class "clockicon" :style "color: ${iconcolor};" :text icon)))

(defwidget timeboxwidget []
	  (centerbox :class "clockbox" :orientation "h" :halign "center" 
	  	(eventbox
	  			:onclick "scripts/bluelightfilterdetection.sh --toggle" :class "bluelighttoggle"
	  			(clockiconwidget :icon "" :iconcolor filterindicator)) ; maybe would be interesting to change icon depending on time of day
	   (label :class "clocktext" :text "${time}")
	   (eventbox 
	   		:onhover "eww open fgcalendarwindow --config ${EWW_CONFIG_DIR}" 
	   		(clockiconwidget :icon "" :iconcolor "black"))
	   ))

(defwidget timeboxhoverwidget []
			(eventbox	:onhover "eww open fgcalendarwindow --config ${EWW_CONFIG_DIR}" 
			(timeboxwidget)))

(defwindow clockwindow
					:monitor 3
					:geometry (geometry :x "0"
																									:y "-30px"
																									; :width "150px"
																									:height "31px"
																									:anchor "top center")
					:stacking "overlay"
			(timeboxwidget))

;; @@@@@@@@@@@@@@@@@@@
;; Calendar
;; @@@@@@@@@@@@@@@@@@@
(defwidget calendarwidget []
		(box :class "calendarbox"
  		(calendar :halign "center" :valign "center" :class "calendarinner")))

(defwidget calendarhoverlostwidget []
		(eventbox :onhoverlost "eww close fgcalendarwindow --config ${EWW_CONFIG_DIR}"
			(calendarwidget)))

(defwindow calendarwindow
  :monitor 3
  :stacking "bg"
  :geometry (geometry :x "0"
                      :y "0.5%"
                      ; :width "360px"
                      ; :height "320px"
                      :anchor "top center")
		(calendarwidget))

(defwindow fgcalendarwindow
  :monitor 3
  :stacking "fg"
  :geometry (geometry :x "0"
                      :y "0.5%"
                      ; :width "360px"
                      ; :height "320px"
                      :anchor "top center")
		(calendarhoverlostwidget))

;; @@@@@@@@@@@@@@@@@@@
;; disk
;; @@@@@@@@@@@@@@@@@@@
(defpoll USEDDISKMAIN :interval "1m" `scripts/calcdiskusage.sh`)
(defpoll USEDDISKSSD :interval "1m" `scripts/calcdiskusage.sh --ssd`)
(defpoll USEDDISKNAS :interval "1m" `scripts/calcdiskusage.sh --nas`)

(defwidget diskusagewidget [driveusage circleclass]
	; (box :orientation "v" :spacing 10 :space-evenly false
	; (box :class "res_box" :orientation "v" :spacing 10 :space-evenly false
		(box :class "res_circle"
				(circular-progress :class circleclass :start-at 75 :value driveusage :thickness 8
						(label :class "res_circle_small" :text "${driveusage}%"))))

(defwidget drivenamewidget [drivetype]
		(label :class "drive_type" :text drivetype :halign "center")) ; fill makes the element the same as its...parent? or sibling?

(defwidget driveinfowidget [driveusage drivetype circleclass]
		(box :class "res_box"
				(box :orientation "v" :spacing 10 :space-evenly false
				(diskusagewidget :driveusage driveusage :circleclass circleclass)
				(drivenamewidget :drivetype drivetype))))

(defwidget diskpanelwidget []
		(centerbox :class "res_panel" :orientation "h"
				(driveinfowidget :driveusage USEDDISKMAIN :drivetype " Main" :circleclass "res_main_disk")
				(driveinfowidget :driveusage USEDDISKSSD :drivetype " SATA" :circleclass "res_ssd_disk")
				(driveinfowidget :driveusage "${USEDDISKNAS}":drivetype "  NAS" :circleclass "res_nas_disk")))

(defwindow diskwindow
		:monitor 3
  :stacking "bg"
  :geometry (geometry :x "4.4%"
                      :y "1%"
                      ; :width "360px"
                      ; :height "320px"
                      :anchor "top right")
		(diskpanelwidget))

;; @@@@@@@@@@@@@@@@@@@
; pacman
;; @@@@@@@@@@@@@@@@@@@
(defpoll UPDATECOUNT :interval "720m" "checkupdates | wc -l")
; (defpoll UPDATES :interval "1m" "echo \"$(checkupdates)\"")
(defwidget pacmanwidget []
		(eventbox :onclick "scripts/checkupdates.sh &" :class "pacmanbutton" ;:tooltip UPDATES
		(box :class "infoitembox" :space-evenly false
						(label :class "pacmantext" :text UPDATECOUNT)
				(infoiconwidget :icon " " :iconclass "pacmanicon"))))

;; @@@@@@@@@@@@@@@@@@@
; Memory
;; @@@@@@@@@@@@@@@@@@@
; (defpoll MEMINFO :interval "5s" "echo \"$(procs)\"")
(defwidget memwidget []
		(eventbox :class "membutton" :onclick "`konsole -e procs sand --sortd mem --watch-interval 5`"
		(box :class "infoitembox" :space-evenly false
				(label :class "memtext" :text "${round(EWW_RAM.used_mem_perc, 0)}%")
				(infoiconwidget :icon "" :iconclass "memicon"))))


;; @@@@@@@@@@@@@@@@@@@
; CPU
;; @@@@@@@@@@@@@@@@@@@
(defpoll CPUUSAGE :interval "5s" "scripts/addleadingzero.sh --cpu")
(defwidget cpuwidget []
		(eventbox :class "cpubutton" :onclick "`konsole -e procs sand --sortd cpu --watch-interval 5`"
		(box :class "infoitembox" :space-evenly false
				(label :class "cputext" :width 25 :text "${round(EWW_CPU.avg, 0)}%"); "${CPUUSAGE}%")
				(infoiconwidget :icon " " :iconclass "cpuicon"))))

;; @@@@@@@@@@@@@@@@@@@
; Temps
;; @@@@@@@@@@@@@@@@@@@
(defwidget cputempwidget []
		(box :class "infoitembox" :space-evenly false
			(label :class "cputemptext" :text "${EWW_TEMPS.CORETEMP_PACKAGE_ID_0}°C")
			(infoiconwidget :icon "" :iconclass "cputempicon")))

;; @@@@@@@@@@@@@@@@@@@
; Controller
;; @@@@@@@@@@@@@@@@@@@
(defpoll CONTROLLERBATTERY :interval "3m" "scripts/batterycheck.sh")
(defwidget controllerwidget []
		(box :class "infoitembox" :space-evenly false
			(label :class "controllertext" :text "${CONTROLLERBATTERY}%")
			(infoiconwidget :icon " " :iconclass "controllericon")))


;; @@@@@@@@@@@@@@@@@@@
; audio
;; @@@@@@@@@@@@@@@@@@@
(defpoll AUDIOPERC :interval "10m" :initial-value "40" "pamixer --get-volume")
(defpoll AUDIOICON :interval "10m" "scripts/switchaudio.sh --icon")
(defwidget audiowidget []
		(eventbox :onclick "scripts/switchaudio.sh" :onscroll "scripts/switchaudio.sh {}" :class "audiobutton"
				(box :class "infoitembox" :space-evenly false
						(label :text "${AUDIOPERC}%" :class "audiotext")
				(infoiconwidget :icon AUDIOICON :iconclass "audioicon"))))

;; @@@@@@@@@@@@@@@@@@@
; spotify
;; @@@@@@@@@@@@@@@@@@@

(deflisten SPOTIFYINFO :initial "" `/usr/bin/python scripts/mediaplayer.py --player spotify`)
; (defvar SPOTIFYINFO "hello")
(defvar TRAIL "...")
(defwidget spotifywidget []
		(eventbox :onclick "playerctl -p spotify play-pause" :onscroll "`[[ {} == \"up\" ]] && playerctl -p spotify previous || playerctl -p spotify next`" :class "spotifybutton"
				(centerbox :class "spotifybox"
						(infoiconwidget :icon "${SPOTIFYINFO.icon}" :iconclass "spotifyplaypauseicon")
						(box :space-evenly "false" (label :class "spotifytext" :show-truncated "false" :limit-width 27 :text "${SPOTIFYINFO.text}")
						(label :class "spotifytext" :text "..."))
						(infoiconwidget :icon "" :iconclass "spotifyicon"))))

;; @@@@@@@@@@@@@@@@@@@
; Info
;; @@@@@@@@@@@@@@@@@@@

(defwidget infoiconwidget [icon iconclass]
		(label :class iconclass :text icon))

(defwidget infowidget []
		(box :class "infobox" :space-evenly false :orientation "h" :spacing 0
				(spotifywidget)
				(audiowidget)
				(controllerwidget)
				(cputempwidget)
				(cpuwidget)
				(memwidget)
				(pacmanwidget)))


(defwindow infowindow
		:monitor 3
		:stacking "overlay"
		:geometry (geometry :x "4.5%"
                      :y "-30px"
                      :height "30px"
                      ; :width "90%"
                      :anchor "top right")
		(infowidget))


(defwidget barwidget []
		(box :class "bar"))

(defwindow barwindow
		:monitor 3
		:stacking "bg"
		:geometry (geometry :x "0%"
                      :y "-38px"
                      :height "39px"
                      :width "100%"
                      :anchor "top right")
		(barwidget))
