;; @@@@@@@@@@@
;; things to mess around with
;; color chooser for fast color choosing

;; @@@@@@@@
;; notes
;; - space-evenly on multiple objects takes the max size and makes every object that size


;; Weather
; (defpoll RUN :interval "15m" `scripts/weather_info --getdata`)
(defvar RUN "test")
(defpoll ICON :interval "5m" `scripts/weather_info --icon`)
(defpoll TEMP :interval "5m" `scripts/weather_info --temp`)
(defpoll HEX :interval "5m" `scripts/weather_info --hex`)
(defpoll QUOTE :interval "5m" `scripts/weather_info --quote`)
(defpoll QUOTE2 :interval "5m" `scripts/weather_info --quote2`)

(defwidget weatherwidget [] 
			(box :class "weatherbox" :orientation "h" :spacing 0 :valign "center" :halign "end" :space-evenly "false" :vexpand "false" :hexpand "false"
				(label :class "weathericon" :style "color: ${HEX};" :text ICON)
				(label :class "weathertemp" :text TEMP)
				(label :class "separator" :text "")
				(label :class "weatherquote":text QUOTE)))

(defwidget weatherquote2widget []
		(box :class "weatherbox" :orientation "h" :spacing 0 :valign "center" :halign "end" :space-evenly "false" :vexpand "false" :hexpand "false"
		(label :class "weatherquote2" :text QUOTE2)))

(defwidget weatherquoteswidget []
		(box :orientation "h" :spacing 5 :valign "center" :halign "end" :space-evenly "false"
		(weatherwidget)
		(weatherquote2widget)))

(defwidget weatherthrowawaywidget []
		(label :active false :visible false :text RUN))

(defwidget weathertogetherwidget []
		(box :orientation "h" :spacing 5 :valign "center" :halign "end" :space-evenly "false"
		(weatherquoteswidget)
		(weatherthrowawaywidget)))

(defwindow weatherwindow
											:monitor 3
											:geometry (geometry :x "17.5%"
																															:y "-32px"
																															:width "100px"
																															:height "24px"
																															:anchor "top left")
											:stacking "fg"
			(weathertogetherwidget))

;; @@@@@@@@@@@@@@@@@@@@@@@
;; Apps
;; @@@@@@@@@@@@@@@@@@@@@@@
(defwidget appsinnerwidget [] 
		(box :class "dockbox" :height 20
			(box :orientation "h" :spacing 15 :valign "center" :halign "center" :space-evenly false
				(button :style "background-image: url('icon.svg');" :class "appicon" :onclick "godot &")
				(button :style "background-image: url('vscode.svg');" :class "appicon" :onclick "code &")
				(button :style "background-image: url('aseprite.png');" :class "appicon" :onclick "/home/sand/CrucialSSD/SteamLibrary/steamapps/common/Aseprite/aseprite &")
				)))

; (defwidget appswidget []
; 			(box 
; 					(appsinnerwidget)))

(defwindow appswindow
           :monitor 3
           :geometry (geometry :x "2%"
                               :y "18%"
                               ; :width "300px"
                               ; :height "80px"
                               :anchor "top right")
           :stacking "bg"
           ; :reserve (struts :distance "80px" :side "top")
           ; :windowtype "dock"
           ; :wm-ignore false
			(appsinnerwidget))

(defwindow appstabletwindow
           :monitor 2
           :geometry (geometry :x "41%"
                               :y "46.5%"
                               ; :width "300px"
                               ; :height "80px"
                               :anchor "top left")
           :stacking "bg"
           ; :reserve (struts :distance "80px" :side "top")
           ; :windowtype "dock"
           ; :wm-ignore false
			(appsinnerwidget))

;; Time
(defpoll time :interval "10s"
  "date '+%I:%M %p - %a, %b %d'")

(defwidget clockiconwidget [icon]
			(label :class "clockicon" :text icon))

(defwidget timeboxwidget []
	  (centerbox :class "clockbox" :orientation "h" :halign "center" 
	  	(clockiconwidget :icon "") ; maybe would be interesting to change icon depending on time of day
	   (label :class "clocktext" :text "${time}")
	   (eventbox :onhover "eww open fgcalendarwindow --config ${EWW_CONFIG_DIR}" (clockiconwidget :icon ""))
	   ))

(defwidget timeboxhoverwidget []
			(eventbox	:onhover "eww open fgcalendarwindow --config ${EWW_CONFIG_DIR}"
			(timeboxwidget)))

(defwindow clockwindow
					:monitor 3
					:geometry (geometry :x "0"
																									:y "-32px"
																									; :width "150px"
																									:height "32px"
																									:anchor "top center")
					:stacking "overlay"
			(timeboxwidget))

;; Calendar
(defwidget calendarwidget []
		(box :class "calendarbox"
  		(calendar :halign "center" :valign "center" :class "cal")))

(defwidget calendarhoverlostwidget []
		(eventbox :onhoverlost "eww close fgcalendarwindow --config ${EWW_CONFIG_DIR}"
			(calendarwidget)))

(defwindow calendarwindow
  :monitor 3
  :stacking "bg"
  :geometry (geometry :x "0"
                      :y "1%"
                      ; :width "360px"
                      ; :height "320px"
                      :anchor "top center")
		(calendarwidget))

(defwindow fgcalendarwindow
  :monitor 3
  :stacking "fg"
  :geometry (geometry :x "0"
                      :y "1%"
                      ; :width "360px"
                      ; :height "320px"
                      :anchor "top center")
		(calendarhoverlostwidget))


;; disk
(defpoll USEDDISKMAIN :interval "1m" `scripts/calcdiskusage.sh`)
(defpoll USEDDISKSSD :interval "1m" `scripts/calcdiskusage.sh --ssd`)
(defpoll USEDDISKNAS :interval "1m" `scripts/calcdiskusage.sh --nas`)

(defwidget diskusagewidget [driveusage circleclass]
	; (box :orientation "v" :spacing 10 :space-evenly false
	; (box :class "res_box" :orientation "v" :spacing 10 :space-evenly false
		(box :class "res_circle"
				(circular-progress :class circleclass :start-at 75 :value driveusage :thickness 8
						(label :class "res_circle_small" :text "${driveusage}%"))))

(defwidget drivenamewidget [drivetype]
		(label :class "drive_type" :text drivetype :halign "center")) ; fill makes the element the same as its...parent? or sibling?

(defwidget driveinfowidget [driveusage drivetype circleclass]
		(box :class "res_box"
				(box :orientation "v" :spacing 10 :space-evenly false
				(diskusagewidget :driveusage driveusage :circleclass circleclass)
				(drivenamewidget :drivetype drivetype))))

(defwidget diskpanelwidget []
		(centerbox :class "res_panel" :orientation "h"
				(driveinfowidget :driveusage USEDDISKMAIN :drivetype "Main" :circleclass "res_main_disk")
				(driveinfowidget :driveusage USEDDISKSSD :drivetype "SATA" :circleclass "res_ssd_disk")
				(driveinfowidget :driveusage USEDDISKNAS :drivetype "NAS" :circleclass "res_nas_disk")))

(defwindow diskwindow
		:monitor 3
  :stacking "bg"
  :geometry (geometry :x "2%"
                      :y "1%"
                      ; :width "360px"
                      ; :height "320px"
                      :anchor "top right")
		(diskpanelwidget))


;; desktop widgets

(defwidget combowidget []
		(centerbox :valign "center"
				(calendarwidget)
				(appsinnerwidget)
				(diskpanelwidget)))

(defwindow combowindow
:monitor 2
  :stacking "fg"
  :geometry (geometry :x "0%"
                      :y "2%"
                      ; :width "360px"
                      ; :height "320px"
                      :anchor "top center")
  (combowidget))